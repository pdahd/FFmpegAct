name: Build FFmpeg for Termux

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_NDK_VERSION: r26d
      ANDROID_API_LEVEL: 24
      TERMUX_ARCH: aarch64
      PREFIX: ${{ github.workspace }}/termux/usr
      TERMUX_HOST_PLATFORM: linux-x86_64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download FFmpeg source
      run: |
        wget -O - https://www.ffmpeg.org/releases/ffmpeg-6.1.1.tar.xz | tar -xJv -C $GITHUB_WORKSPACE
    
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Download and extract Android NDK
      run: |
        wget https://dl.google.com/android/repository/android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip
        unzip android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip
        export ANDROID_NDK_HOME=$GITHUB_WORKSPACE/android-ndk-${{ env.ANDROID_NDK_VERSION }}
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y autoconf automake build-essential cmake git libtool pkg-config texinfo zlib1g-dev yasm llvm \
          fontconfig libfreetype6-dev libfribidi-dev libgme-dev libharfbuzz-dev libaom-dev libass-dev libbluray-dev libbz2-dev \
          libdav1d-dev libgnutls28-dev libiconv-hook-dev liblzma-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev \
          libopenmpt-dev libopus-dev libsoxr-dev libsrt-openssl-dev libssh-dev libtheora-dev libv4l-dev libvo-amrwbenc-dev \
          libvorbis-dev libvpx-dev libvidstab-dev libwebp-dev libx264-dev libx265-dev libxml2-dev libxvidcore-dev libzimg-dev \
          liblcms2-dev ocl-icd-opencl-dev libsvtav1-dev

    - name: Install gas-preprocessor
      run: |
        git clone https://github.com/FFmpeg/gas-preprocessor
        sudo cp gas-preprocessor/gas-preprocessor.pl /usr/local/bin/
        sudo chmod +x /usr/local/bin/gas-preprocessor.pl

    - name: Set up environment variables
      run: |
        export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export AS=$TOOLCHAIN/bin/arm-linux-androideabi-as
        export CC=$TOOLCHAIN/bin/aarch64-linux-androideabi${{ env.ANDROID_API_LEVEL }}-clang
        export CXX=$TOOLCHAIN/bin/aarch64-linux-androideabi${{ env.ANDROID_API_LEVEL }}-clang++
        export LD=$TOOLCHAIN/bin/arm-linux-androideabi-ld
        export STRIP=$TOOLCHAIN/bin/llvm-strip
        export NM=$TOOLCHAIN/bin/llvm-nm
        export CROSS_PREFIX=$TOOLCHAIN/bin/arm-linux-androideabi-
        export PKG_CONFIG=$ANDROID_NDK_HOME/prebuilt/linux-x86_64/bin/pkg-config
        export PATH="$TOOLCHAIN/bin:$PATH"
        export GASPP="/usr/local/bin/gas-preprocessor.pl"
        export TERMUX_PREFIX=${{ env.PREFIX }}
        echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
        echo "AS=$AS" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "LD=$LD" >> $GITHUB_ENV
        echo "STRIP=$STRIP" >> $GITHUB_ENV
        echo "NM=$NM" >> $GITHUB_ENV
        echo "CROSS_PREFIX=$CROSS_PREFIX" >> $GITHUB_ENV
        echo "PKG_CONFIG=$PKG_CONFIG" >> $GITHUB_ENV
        echo "PATH=$TOOLCHAIN/bin:$PATH" >> $GITHUB_ENV
        echo "GASPP=$GASPP" >> $GITHUB_ENV
        echo "TERMUX_PREFIX=$TERMUX_PREFIX" >> $GITHUB_ENV
        echo "_FFMPEG_SOVER_avutil=58" >> $GITHUB_ENV
        echo "_FFMPEG_SOVER_avcodec=60" >> $GITHUB_ENV
        echo "_FFMPEG_SOVER_avformat=60" >> $GITHUB_ENV

    - name: Test compiler
      run: |
        echo 'int main() { return 0; }' > test.c
        $TOOLCHAIN/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-clang test.c -o test
        ./test

    - name: Configure FFmpeg
      run: |
        cd $GITHUB_WORKSPACE/ffmpeg-6.1.1

        export TERMUX_PKG_BUILDDIR=$GITHUB_WORKSPACE/ffmpeg-6.1.1
        export TERMUX_PKG_SRCDIR=$GITHUB_WORKSPACE/ffmpeg-6.1.1
        
        _EXTRA_CONFIGURE_FLAGS=""  # 定义为全局变量

        if [ $TERMUX_ARCH = "arm" ]; then
        _ARCH="armeabi-v7a"
        _EXTRA_CONFIGURE_FLAGS="--enable-neon"
        elif [ $TERMUX_ARCH = "i686" ]; then
        _ARCH="x86"
        _EXTRA_CONFIGURE_FLAGS="--disable-asm"
        elif [ $TERMUX_ARCH = "x86_64" ]; then
        _ARCH="x86_64"
        elif [ $TERMUX_ARCH = "aarch64" ]; then
        _ARCH=$TERMUX_ARCH
        _EXTRA_CONFIGURE_FLAGS="--enable-neon"
        else
        echo "Unsupported arch: $TERMUX_ARCH"
        exit 1
        fi
        
        $TERMUX_PKG_SRCDIR/configure \
            --arch="${_ARCH}" \
            --as="$AS" \
            --cc="$CC" \
            --cxx="$CXX" \
            --nm="$NM" \
            --pkg-config="$PKG_CONFIG" \
            --strip="$STRIP" \
            --cross-prefix="${TERMUX_HOST_PLATFORM}-" \
            --disable-indevs \
            --disable-outdevs \
            --enable-indev=lavfi \
            --disable-static \
            --disable-symver \
            --enable-cross-compile \
            --enable-gnutls \
            --enable-gpl \
            --enable-version3 \
            --enable-jni \
            --enable-lcms2 \
            --enable-libaom \
            --enable-libass \
            --enable-libbluray \
            --enable-libdav1d \
            --enable-libfontconfig \
            --enable-libfreetype \
            --enable-libfribidi \
            --enable-libgme \
            --enable-libharfbuzz \
            --enable-libmp3lame \
            --enable-libopencore-amrnb \
            --enable-libopencore-amrwb \
            --enable-libopenmpt \
            --enable-libopus \
            --enable-librav1e \
            --enable-libsoxr \
            --enable-libsrt \
            --enable-libssh \
            --enable-libsvtav1 \
            --enable-libtheora \
            --enable-libv4l2 \
            --enable-libvidstab \
            --enable-libvo-amrwbenc \
            --enable-libvorbis \
            --enable-libvpx \
            --enable-libwebp \
            --enable-libx264 \
            --enable-libx265 \
            --enable-libxml2 \
            --enable-libxvid \
            --enable-libzimg \
            --enable-mediacodec \
            --enable-opencl \
            --enable-shared \
            --prefix="$TERMUX_PREFIX" \
            --target-os=android \
            --extra-libs="-landroid-glob" \
            --disable-vulkan \
            $_EXTRA_CONFIGURE_FLAGS \
            --disable-libfdk-aac

        if [ $? -ne 0 ]; then
            echo "Error: configure failed!"
            exit 1
        fi

    - name: Build FFmpeg
      run: |
        cd $GITHUB_WORKSPACE/ffmpeg-6.1.1
        make -j$(nproc)
        make install
    
    - name: Create symlinks for shared libraries
      run: |
        mkdir -p $PREFIX/lib
        cd $PREFIX/lib || exit 1
        for f in util codec format; do
            s=$(eval echo \$_FFMPEG_SOVER_av${f})
            if [ ! "${s}" ]; then
                echo "Empty SOVERSION for libav${f}."
                exit 1
            fi
            if [ ! -e "./libav${f}.so.${s}" ]; then
                ln -sf libav${f}.so libav${f}.so.${s}
            fi
        done

    
    - name: Debug List files in lib directory
      run: ls -l ${PREFIX}/lib
    
    - name: Upload FFmpeg shared libraries
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-shared-libraries
        path: ${PREFIX}/lib/libavutil.so
  
