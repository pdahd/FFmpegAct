name: Build FFmpeg for Termux

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_NDK_VERSION: r26d
      ANDROID_API_LEVEL: 24
      ARCH: armeabi-v7a
      PREFIX: ${{ github.workspace }}/termux/usr/lib

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Download and extract Android NDK
      run: |
        wget https://dl.google.com/android/repository/android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip
        unzip android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip
        export ANDROID_NDK_HOME=$GITHUB_WORKSPACE/android-ndk-${{ env.ANDROID_NDK_VERSION }}
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y autoconf automake build-essential cmake git libtool pkg-config texinfo zlib1g-dev yasm llvm \
          fontconfig libfreetype6-dev libfribidi-dev libgme-dev libharfbuzz-dev libaom-dev libass-dev libbluray-dev libbz2-dev \
          libdav1d-dev libgnutls28-dev libiconv-hook-dev liblzma-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev \
          libopenmpt-dev libopus-dev libsoxr-dev libsrt-openssl-dev libssh-dev libtheora-dev libv4l-dev libvo-amrwbenc-dev \
          libvorbis-dev libvpx-dev libvidstab-dev libwebp-dev libx264-dev libx265-dev libxml2-dev libxvidcore-dev libzimg-dev \
          liblcms2-dev ocl-icd-opencl-dev libsvtav1-dev

    - name: Install gas-preprocessor
      run: |
        git clone https://github.com/FFmpeg/gas-preprocessor
        sudo cp gas-preprocessor/gas-preprocessor.pl /usr/local/bin/
        sudo chmod +x /usr/local/bin/gas-preprocessor.pl

    - name: Set up environment variables
      run: |
        export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export AS=$TOOLCHAIN/bin/arm-linux-androideabi-as
        export CC=$TOOLCHAIN/bin/armv7a-linux-androideabi${{ env.ANDROID_API_LEVEL }}-clang
        export CXX=$TOOLCHAIN/bin/armv7a-linux-androideabi${{ env.ANDROID_API_LEVEL }}-clang++
        export LD=$TOOLCHAIN/bin/arm-linux-androideabi-ld
        export STRIP=$TOOLCHAIN/bin/llvm-strip
        export NM=$TOOLCHAIN/bin/llvm-nm
        export CROSS_PREFIX=$TOOLCHAIN/bin/arm-linux-androideabi-
        export PKG_CONFIG=$ANDROID_NDK_HOME/prebuilt/linux-x86_64/bin/pkg-config
        export PATH="$TOOLCHAIN/bin:$PATH"
        export GASPP="/usr/local/bin/gas-preprocessor.pl"
        export TERMUX_PREFIX=${{ env.PREFIX }}
        echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
        echo "AS=$AS" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "LD=$LD" >> $GITHUB_ENV
        echo "STRIP=$STRIP" >> $GITHUB_ENV
        echo "NM=$NM" >> $GITHUB_ENV
        echo "CROSS_PREFIX=$CROSS_PREFIX" >> $GITHUB_ENV
        echo "PKG_CONFIG=$PKG_CONFIG" >> $GITHUB_ENV
        echo "PATH=$TOOLCHAIN/bin:$PATH" >> $GITHUB_ENV
        echo "GASPP=$GASPP" >> $GITHUB_ENV
        echo "TERMUX_PREFIX=$TERMUX_PREFIX" >> $GITHUB_ENV

    - name: Run build script
      run: |
        chmod +x build.sh
        ./build.sh

    - name: Create symlinks for shared libraries
      run: |
        cd $PREFIX/lib || exit 1
        for f in util codec format; do
            s=$(eval echo \$_FFMPEG_SOVER_av${f})
            if [ ! "${s}" ]; then
                echo "Empty SOVERSION for libav${f}."
                exit 1
            fi
            if [ ! -e "./libav${f}.so.${s}" ]; then
                ln -sf libav${f}.so libav${f}.so.${s}
            fi
        done

    - name: Upload FFmpeg shared libraries
      uses: actions/upload-artifact@v2
      with:
        name: ffmpeg-shared-libraries
        path: |
          $PREFIX/lib/libavutil.so*
          $PREFIX/lib/libavcodec.so*
          $PREFIX/lib/libavformat.so*
